# -*- coding: utf-8 -*-
"""PricerBLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fci842Nq0PGgePML4u-ztSt4aaVILtm
"""

import math
from scipy.stats import norm

#pricing du call

S=float(input('Spot'))
K=float(input('Strike'))
T=float(input('Matu'))
r=float(input('rate'))
sigma=float(input('sigma'))

def d1(S,K,T,r,sigma):
  return ((math.log(S/K)+(r+0.5*sigma**2)*T)/(sigma*math.sqrt(T)))

def d2(S,K,T,r,sigma):
  return d1(S,K,T,r,sigma)-sigma*math.sqrt(T)

def call_value(S,K,T,r,sigma):
  D1=d1(S,K,T,r,sigma)
  D2=d2(S,K,T,r,sigma)
  return norm.cdf(D1)*S-norm.cdf(D2)*K*math.exp(-r*T)

print ("Cette option vaut", (call_value(S,K,T,r,sigma)))

D1=d1(S,K,T,r,sigma)
D2=d2(S,K,T,r,sigma)

#les grecques

def moneyness(D2):
  return norm.cdf(D2)
print ("La probabilit√© que l'option expire dans la monnaie est",round(moneyness(D2),2))

def delta(D1):
  return norm.cdf(D1)
print ("Le delta de l option est", round(delta(D1),2))

def gamma(D1,S,T,sigma):
  return norm.pdf(D1)/(S*sigma*math.sqrt(T))
print ("Le gamma de l option est", round(gamma(D1,S,T,sigma),2))

def vega(D1,S,T):
  return norm.pdf(D1)*S*math.sqrt(T)
print ("Le vega de l option est", round(vega(D1,S,T),2))

def theta(D1,D2,S,K,T,r,sigma):
  return -((S*norm.pdf(D1)*sigma)/(2*math.sqrt(T)))-(r*K*math.exp(-r*T)*norm.cdf(D2))
print ("Le theta de l option est", round(theta(D1,D2,S,K,T,r,sigma),2))

def rho(D2,K,T,r):
  return K*T*math.exp(-r*T)*norm.cdf(D2)
print ("Le rho de l option est", round(rho(D2,K,T,r),2))